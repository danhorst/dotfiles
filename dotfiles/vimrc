scriptencoding utf-8
   
" Enable filetype-specific indenting and plugins
filetype plugin indent on
     
" Explicitly set 256 color support
set t_Co=256

" Color *********************************************
"set background=dark
"colorscheme ir_black
colorscheme darkblue 
syntax on

"i Turn on line numbering. Turn it off with 'set nonu'
set nu

" Change <Leader>
let mapleader = ","

" Set nocompatible is necessary fro some plugins 
set nocompatible

" Highlight matching parens
set showmatch

" Indent automatically depending on filetype
filetype indent on
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab

" Case insensitive search
set ic

"Line numbers
set number

" Highlight search
set hlsearch

" Search next/previous -- center in page
nmap n nzz
nmap N Nzz
nmap * *Nzz
nmap # #nzz

" Set to auto read when a file is changed from the outside
set autoread

" Make backspace work in insert mode
set backspace=indent,eol,start

" Remap F1 from Help to ESC. No more accidents
nmap <F1> <Esc>
map! <F1> <Esc>

" Remember last position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Open new vertical split windows to the right
set splitright 

" Hide file browser
let g:explHideFiles='^.'

" Enable wildmenu
set wildmenu

"Set GUI font
set guifont=Inconsolata\ 14

augroup mkd
 autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:>
augroup END

" code completion in gvim
set incsearch

"Configure ack search
set grepprg=ack
set grepformat=%f:%l:%m

" Configure FuzzyFinderTextmate
let g:fuzzy_ignore = "*.log"
let g:fuzzy_ignore = "*.svn"
let g:fuzzy_ignore = "*.swp"
let g:fuzzy_ignore = "*.jpg"
let g:fuzzy_ignore = "*.gif"
let g:fuzzy_ignore = "*~"
let g:fuzzy_matching_limit = 70

map <leader>t :FuzzyFinderTextMate<CR>
map <leader>b :FuzzyFinderBuffer<CR>

" Scratch buffer toggle for scratch.vim
function! ToggleScratch()
  if expand('%') == g:ScratchBufferName
    quit
  else
    Sscratch
  endif
endfunction

map <leader>s :call ToggleScratch()<CR>

" function for calling NERDtree
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

" function for clearing search pattern
map <leader>c :let @/ = ""<CR>

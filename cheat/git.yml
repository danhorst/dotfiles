---
git: |-
  Git SVN
  =======
  Commit Git commits to the SVN repository
  $ git svn dcommit

  Sync SVN repository with working copy. All changes in the local git repository and not the SVN repository will be lost.
  $ git svn rebase

  Git Basics
  ==========

  View configuration file
  $ git config --list
  $ cat ~/.gitconfig

  Alias a git command
  $ git config --global alias.co checkout

  Ignore whitespace changes (useful for non-space sensitive languages like Ruby and C)
  $ git config --global apply.whitespace nowarn

  To ignore files in a git repository create a file in the root directory of the project (or in any or every directory if desired):
  $ touch .gitignore

  and add criteria such as filenames or wildcards to be ingored
  *.log
  db/schema.rb
  temp/*

  for additional syntax see
  $ cat .git/info/exclude

  An interactive commit history can be accessed via command line:
  $ gitk --all

  It can be configured via ~/.gitk

  Git Commands
  ============

  Create a repository in the current directory
  $ git init

  Create a local copy of a git repository
  $ git clone [user@domain:/path]

  View the log
  $ git log

  View log with ASCII graph
  $ git log --stat

  View log with diffs
  $ git log -p

  View branches
  $ git branch

  View all branches
  $ git branch -a

  Create a branch
  $ git branch [branch_name]

  Delete branch
  $ git branch -d [branch_name]

  Force delete a branch
  $ git branch -D [branch_name]

  Create a tracking branch
  $ git branch --track [branch_name] [repo/branch]

  Switch to a branch
  $ git checkout [branch_name]

  Create and switch to a branch
  $ git checkout -b [branch_name]

  Add all content to the index
  $ git add .

  Add specific content to the index
  $ git add [file_name]

  Save changes queued to the index
  $ git commit

  Save all uncommitted changes Alias of git commit -a.
  $ git ci

  Commit and show diff of changes
  $ git commit -v

  Quick commit message
  $ git commit -m "Message"

  Restart branch with code in another branch
  $ git rebase [branch_name]

  View the difference between branches
  $ git diff [branch1] [branch2]

  Combine code from a branch into the current one
  $ git merge [branch_name]

  Undo last commit or merge
  $ git reset --hard ORIG_HEAD

  Save uncommitted changes
  $ git stash save "Description"

  Show stash
  $ git stash list

  Merge the stash with working directory
  $ git stash apply

  Delete stashed code
  $ git stash clear

  Send commit objects to another repository
  $ git push

  Send commits to a specific repo and branch
  $ git push [repository] [branch_name]

  Fetch objects and merge with current branch (if tracking)
  $ git pull

  Fetch and merge from a specific repo and branch
  $ git pull [repository] [branch_name]

  Get objects from a repository
  $ git fetch [repository]

  Create a git repository based on a Subversion repo
  $ git-svn clone [url]

  Send git commits back to Subversion
  $ git-svn dcommit

  Get changes from Subversion
  $ git-svn rebase

  If you have a single commit on another branch that you would like to have in the current branch, use
  $ git cherry-pick other-branch~2

  Branching
  ---------

  When working with remote branchs the git_remote_branch gem is highly recommended for simplifying syntax.

  Show all remote branches
  $ git branch -r

  Show all branches
  $ git branch -a

  Checkout a remote branch other than master
  Note: this creates a local branch <local name> based on the upstream branch and switches your working copy to that branch.
  $ git checkout --track -b <local name> origin/<remote name>
  $ git pull
  $ git push origin <local name>

  Sometimes you may need to use the following instead of that last commit:
  $ git push origin <local name>:<remote name without origin/>

  Merging Branches
  ----------------

  To merge all the changes in a branch in a single commit:
  git merge --squash <branch name>
